//一元操作符，只能操作一个值的操作符
var a = 12;
var c = a++;
console.log(c);//12
var d = ++a;
console.log(d);//14
/**
 * 递增和递减操作符遵循规则：
 * 1.应用于一个包含有效数字的字符串时，先转换成数字在执行运算，字符串变量变为数值变量
 * 2.应用于一个不包含有效数字的字符串时，将变量转换成为NaN（不是数字，但是类型是number）
 * 3.应用于布尔值先转变成0或1，然后在运算，布尔值转变成了数值变量
 * 4.应用于浮点数，执行加减1的操作
 * 5.引用于对象先调用valueOf()方法，取得一个可供操作的值。如果结果是NaN，则在调用头String()方法后在应用前面的规则。对象变量变成了数值变量。
 */
var s1 = "2";
console.log(++s1);//3
var s2 = "z";
console.log(++s2);//NaN
var b = false;
console.log(++b);//1
var f = 1.1;
console.log(++f);//2.1
var o = {
    valueOf: function() {
        return -1;
    }
};
console.log(++o);//0
//位操作符
/**
 * （ECMAScript中所有数都是以64位格式存储，但位操作符不直接操作64位的值，而是先将64位的值转换为32位，其中前31位表示整数的值，第32位表示数值的符号：0表示整数，1表示负数，这个表示符号叫做“符号位”。没有用到的位以0填充）
 * 二进制补码求法：
 * 1.求这个数值的二进制码
 * 2.求二进制码的反码，即0替换为1，1替换为0
 * 3.得到的二进制反码加1
 */

//1.按位非(Not)，用波浪线(~)表示，执行结果返回数值的反码，其本质是操作数的负值减1
var num1 = 25;
var num2 = ~num1;
console.log(num2); // -26
//2.按位与（AND），用(&)表示，本质是将两个数值的每一位对齐，操作规则是：只有在两数值的对应为都是1时才返回1
var result = 25 & 3;
console.log(result); //1
//3.按位或（OR），用(|)表示，本质和“与”相同，操作规则是：只有在两个位都是0的情况下才返回0
var result2 = 25 | 3;
console.log(result2); //27
//4.按位异或（XOR），用符号（^）表示。与按位或的不同之处在于，这个操作在两个数值对应为上只有一个1才返回1，如果两位都是1或都是0，则返回0.
var result3 = 25 ^ 3;//26
//5.左移，用两个小于号（<<）表示，这个操作符会将数值的所有位向左移动指定的位数,向左移动后,原数值的右侧多出的空位用0来填充。
var oldValue = 2;
var newValue = oldValue << 5;
console.log(newValue);//十进制的64，二进制的1000000
//6.有符号的右移，用两个大于符号（>>）表示。这个操作符会将数值向右移动，但保留符号位。与左移操作恰好相反。移动后左侧多出的空位用符号位的值来填充。
var oldValue2 = 64;
var newValue2 = oldValue2 >> 5;//十进制的2，二进制的10
//7.无符号右移，用三个大于号（>>>）表示。这个操作符会将数值 的所有32位都向右移动，多出的空位用0来填充。对正数来说无符号右移和有符号右移相同。
var oldValue3 = -64;
var newValue3 = oldValue >>> 5; //等于十进制的13421776
